<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Twin Engine Labs Engineering</title>
  <link href="http://dev.twinenginelabs.com/feed.xml" rel="self"/>
  <link href="http://dev.twinenginelabs.com/"/>
  <updated>2012-03-04T18:37:55-06:00</updated>
  <id>http://dev.twinenginelabs.com/</id>
  <author>
    <name>Mike Mayo</name>
  </author>

  
  <entry>
    <title type="html">How to make a blog post with Jekyll</title>
    <link href="http://dev.twinenginelabs.com/2012/How-to-make-a-blog-post-with-Jekyll"/>
    <id>http://dev.twinenginelabs.com/2012/How-to-make-a-blog-post-with-Jekyll</id>
    <updated>2012-02-08T00:00:00-06:00</updated>
    <content type="html">
      
        &lt;p&gt;By &lt;a href=&quot;http://dev.twinenginelabs.com/team/#mike&quot; title=&quot;Mike Mayo&quot;&gt;@Mike Mayo&lt;/a&gt;.
      &lt;div style=&quot;text-align:center&quot;&gt;
&lt;img src=&quot;/images/jekyll.jpg&quot; height=&quot;300&quot;/&gt;
&lt;br&gt;
  &lt;p class=&quot;caption&quot;&gt;No not that Jekyll!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;#8217;ve finally gotten around to setting up a blog site for the engineering team at &lt;a href=&quot;http://twinenginelabs.com&quot;&gt;Twin Engine Labs&lt;/a&gt;, and I thought it appropriate to have the first post be a guide to all those who&amp;#8217;ve never done this before.&lt;/p&gt;
&lt;p&gt;For the purpose of this guide, I&amp;#8217;m going to assume you&amp;#8217;ve already gotten a basic Jekyll blog site setup, and I&amp;#8217;ll be highlighting some of the functionality I use and showing you how to create your first post. If you don&amp;#8217;t have a blog setup, feel free to fork my &lt;a href=&quot;https://github.com/gotmayonase/blog&quot;&gt;personal blog on GitHub&lt;/a&gt; (that&amp;#8217;s actually what we did to get this blog going). If you like to start fresh, just take a look at the &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll GitHub repo&lt;/a&gt; for some instructions.&lt;/p&gt;
&lt;h3&gt;Highlight Reel&lt;/h3&gt;
&lt;div class=&quot;indent&quot;&gt;
&lt;h4&gt;Generating the site&lt;/h4&gt;
&lt;p&gt;If you&amp;#8217;re unfamiliar, Jekyll is a static site generator. This means you&amp;#8217;re not working in the type of server environment you might be used to if you&amp;#8217;re working with Rails or another web framework. Running &lt;code&gt;jekyll&lt;/code&gt; without any options will take all of your posts and any content in the current directory, and generate a static site in the &lt;code&gt;_site&lt;/code&gt; directory. Posts are organized by a configuration in the &lt;code&gt;_config.yml&lt;/code&gt; file called &lt;code&gt;permalink&lt;/code&gt;. I&amp;#8217;ve got mine set to &lt;code&gt;/:year/:title&lt;/code&gt;, so posts end up stored under a folder named for the current year, and in a file named &lt;code&gt;my-blog-post-title.html&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Running the server&lt;/h4&gt;
&lt;p&gt;Jekyll does come with the ability to run a WebBrick server while you&amp;#8217;re developing, and also has a flag to auto-regenerate the static files as things change.  To start this just run &lt;code&gt;jekyll -a --server&lt;/code&gt; in your project directory.&lt;/p&gt;
&lt;h4&gt;Faster regeneration&lt;/h4&gt;
&lt;p&gt;Since this is your first post, regenerating files should go rather quickly. However things can slow down once you have more content, so something that can help while you&amp;#8217;re crafting a post is to pass the &lt;code&gt;--limit_posts 1&lt;/code&gt; option when running the server. This will instruct Jekyll to only regenerate the most recent post, which is likely the one you&amp;#8217;re working on. If you&amp;#8217;re working on an older post, be sure to increase 1 as needed, or just not pass this flag at all. &lt;sup&gt;&lt;a href=&quot;#footnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4&gt;Code syntax highlighting&lt;/h4&gt;
&lt;p&gt;If you want to include code examples in your blog, Jekyll can give you syntax highlighting easily via the Pygments library. It&amp;#8217;s a Python library you&amp;#8217;ll have to install on your system, and the guide can be found &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/install&quot;&gt;here&lt;/a&gt;. Once you&amp;#8217;ve got that installed, be sure to pass &lt;code&gt;--pygments&lt;/code&gt; when running the server.  Then just wrap any code example in highlight block and pass it the language you&amp;#8217;re highlighting. For example:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;was generated from the following code:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/images/syntax_highlighting.png&quot; width=&quot;150&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;It has support for a ton of languages, which you can see a list of &lt;a href=&quot;http://pygments.org/languages/&quot;&gt;right here&lt;/a&gt;. Now all this does is wrap the code in a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block and then break it up into a lot of &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s with special &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; classes attached. You&amp;#8217;ll have to provide styling to get the colors you want, but the &lt;a href=&quot;http://mikemayo.org/css/syntax.css&quot;&gt;syntax.css&lt;/a&gt; stylesheet from my blog should give you a good starting point, and I&amp;#8217;m certain that there are some other stylesheets out on the web if you look hard enough.&lt;/p&gt;
&lt;h4&gt;Make your data meta&lt;/h4&gt;
&lt;p&gt;Jekyll uses &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;&lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; Front Matter&lt;/a&gt; for configurations, and you can setup variables at the top of your post file by delimiting it with three dashes. Any variable you set there will be available off the &lt;code&gt;page&lt;/code&gt; object inside your post, or, if you&amp;#8217;re accessing the post outside of that file, whatever variable you&amp;#8217;ve got it assigned to. You also have global access to a &lt;code&gt;posts&lt;/code&gt;, which is another place you might make use of those variables. I generally use things like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;excerpt&lt;/code&gt; (for a synopsis in listings), &lt;code&gt;keywords&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt; (for blogs that support multiple authors), etc&amp;#8230; There is also the &lt;code&gt;layout&lt;/code&gt; variable if you want to render your post inside another defined layout, and the &lt;code&gt;published&lt;/code&gt; variable (set to true if you want a post visible, false if you don&amp;#8217;t).  Example, the metadata for this post:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/images/metadata.png&quot; width=&quot;512&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Cut the chit-chat, let&amp;#8217;s make a post!&lt;/h3&gt;
&lt;p&gt;Alright so now that you know some of the neat stuff we can do, let&amp;#8217;s go ahead and create a post. First, if you&amp;#8217;ve cloned my blog or are using something similar, you&amp;#8217;ll likely have a directory structure like so:&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;/images/jekyll_file_tree.png&quot; width=&quot;126&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;_site&lt;/code&gt; directory is where the static site will be generated by default; everything else is fairly self-explanatory. All of your posts will go into the &lt;code&gt;_posts&lt;/code&gt; directory. If you want a rundown of all of the other directories, see &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When creating your post, it&amp;#8217;s important to follow the correct naming convention when creating your posts. The files should be named like so:&lt;/p&gt;
&lt;p&gt;Liquid error: No such file or directory &amp;#8211; pygmentize -l ruby -f html -O encoding=utf-8&lt;/p&gt;
&lt;p&gt;I personally write all my blogs in Textile, but Jekyll also supports Markdown or just plain &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;. If you&amp;#8217;re going to use Textile, check out the &lt;a href=&quot;http://redcloth.org/textile&quot;&gt;RedCloth Textile guide&lt;/a&gt;, it&amp;#8217;s a great resource for all the available options.&lt;/p&gt;
&lt;p&gt;Now create your file, throw the appropriate metadata at the top, and get to writing. If you&amp;#8217;re running the server with the &lt;code&gt;-a&lt;/code&gt; option, files will regenerate as you save though sometimes it may take a couple refreshes to see the changes. That&amp;#8217;s really all there is to writing your first blog post.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve finished, I&amp;#8217;d suggest stopping the server and then running &lt;code&gt;jekyll&lt;/code&gt; or &lt;code&gt;jekyll --pygments&lt;/code&gt; (if you&amp;#8217;ve got syntax highlighting) to regenerate the entire site. This is especially important if you&amp;#8217;re running it with the &lt;code&gt;--limit_posts&lt;/code&gt; option as it will have only been auto-generating the number of posts you&amp;#8217;ve specified and your other posts will be sadly missing.&lt;/p&gt;
&lt;h3&gt;Deploying to Heroku&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; is a phenomenal service for hosting something like this, so it&amp;#8217;s where I choose to deploy to. I&amp;#8217;m not gonna go through how to setup a Heroku account with you, as they have plenty of excellent guides for that. However, if you want to use Heroku to deploy a Jekyll site, I&amp;#8217;d suggest looking at the &lt;a href=&quot;https://github.com/adaoraul/rack-jekyll&quot;&gt;rack-jekyll&lt;/a&gt; gem. The current version in RubyGems is a little dated, and relies on some older versions of gems, so I&amp;#8217;d suggest using the latest from Git. Unfortunately there&amp;#8217;s some gotchas with doing that, but I&amp;#8217;ve got a &lt;a href=&quot;http://mikemayo.org/2012/deploying-jekyll-sites-to-heroku-with-rack-jekyll/&quot;&gt;blog post&lt;/a&gt; up detailing how to get around that.&lt;/p&gt;
&lt;h3&gt;Fin!&lt;/h3&gt;
&lt;p&gt;That should cover the basics for creating your first Jekyll blog post.  If you&amp;#8217;ve got any further questions, feel free to hit me up via &lt;a href=&quot;http://twitter.com/mike_mayo&quot;&gt;Twitter&lt;/a&gt;, or IM/Email if you&amp;#8217;ve got my info.&lt;/p&gt;
&lt;div id=&quot;about_the_author&quot;&gt;
&lt;h4&gt;About the Author&lt;br /&gt;
Included file &amp;#8216;mike.html&amp;#8217; not found in _includes directory&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;post_footer&quot;&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;ol&gt;
	&lt;li id=&quot;footnote1&quot;&gt;&lt;a href=&quot;http://scottpatten.ca/2011/11/speeding-up-jekyll-generation.html#comment-430573417&quot;&gt;Speeding up Jekyll generation&lt;/a&gt;, Scott Patten&lt;br /&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
    </content>
  </entry>
  
</feed>
